Assignment

NOTE: Do not forget to see manual page using "--help" option in command when searching for options/commands for a particular task.

1. Install Docker, either on your native OS or on a VM. Make sure it runs. type "docker -v" to check if it's installed.
   try below commands for help
	docker --help  ---> This command shows all available options and commands to work with images and containers
	docker images --help ---> This command shows all the avaialble options and commands to work with docker images
	docker ps --help ---> This command shows all the avaialble options and commands to work with docker containers

2. Find a image from dockerhub of your choice(recommeded: nginx), don't use browser, pull the official image from dockerhub
   docker search nginx
   docker pull nginx

3. List all the available images in your machine/vm, make sure you see recently pulled image in the list.
   docker images

4. Find out the "Full" ImageId of the image that you pulled and write it below.
   docker images --no-trunc nginx

5. Create a container of your image
   docker create nginx
  
6. List all the running containers
   docker ps 

7. List all the running and stopped containers
   docker ps -a

8. Find out the "Full" containerId of the container and write it below.
   docker ps -a  --no-trunc

9. Find out how many image layers are used to build this image.
   docker image history nginx

10. Get the Apache Tomcat 7 server image from the docker hub.
    docker pull tomcat:7

11. Run the Apache Tomcat 7, I mean create a container of Apache Tomcat.
    docker create tomcat

12. Find out what is the IP Address of the Apache Tomcat Container that it is running on
    docker inspect c380a3ee91c1 | grep IPAddress
    172.17.0.2

13. Which Port it is using?
    8080/tcp

14. Try to access the Tomcat's home page from your machine/vm.
    172.17.0.2:8080
    
15. What is the disk size of Apache Tomcat image?
    357MB

16. Find out list of all environment variables that is configured for tomcat image, can you see JAVA_HOME and CATALINA_HOME? What did you notice about it?
    docker image inspect tomcat:7 

    "PATH=/usr/local/tomcat/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
                "LANG=C.UTF-8",
                "JAVA_HOME=/docker-java-home/jre",
                "JAVA_VERSION=7u181",
                "JAVA_DEBIAN_VERSION=7u181-2.6.14-1~deb8u1",
                "CATALINA_HOME=/usr/local/tomcat",
                "TOMCAT_NATIVE_LIBDIR=/usr/local/tomcat/native-jni-lib",
                "LD_LIBRARY_PATH=/usr/local/tomcat/native-jni-lib",
                "OPENSSL_VERSION=1.1.0f-3+deb9u2",
                "GPG_KEYS=05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 713DA88BE50911535FE716F5208B0AB1D63011C7 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23",
                "TOMCAT_MAJOR=7",
                "TOMCAT_VERSION=7.0.91",
                "TOMCAT_SHA512=8cce397deaefa6f8aa2a499142f2dba46ac53e14ef432805a7819fd8987ebc66b257829c1f596c95e4d9fd86cfd45d5eea0c2b7d63286f7b1e58dc3316b7936b"


17. Find out which port is exposed for tomcat?
    "ExposedPorts": {
                "8080/tcp": {}
            }


18. Run multiple conntainers of tomcat on different port and access it's home page.
19. Pull ubuntu os from dockerhub, try to pull 2 images of ubuntu, Except the latest one.
    docker pull ubuntu:14.04
    docker pull ubuntu:16.04

20. Run the container of ubuntu in attached mode.
    docker attach ubuntu:14.04

21. Run the container of another ubuntu in detached mode.
    docker run -d ubuntu:16.04

22. Check how many ubuntu containers are running and stopped
    Both are running

23. Is the tomcat container running? If no, start one.

24. Check the logs, generated by tomcat container(don't forget to make request to tomcat's home page to see the log).
25. Check if ubuntu conatiner is running? If no, start one in attached mode to the terminal.
26. Login as root user in ubuntu container
27. Create a file with any name in root directory
28. Install software of your choice in ubuntu container using "apt-get install"
29. Now exit the ubuntu shell, are you back to your host machine, if not, come back to the host machine.
30. Check if the ubuntu container is running.
31. Create a new ubuntu container out of the same image as that previous container in attached mode.
32. Login as a root user
33. Check if you can see the file created in previous container, you will not see the file as well as software that you installed in the previous container. Now kill this Container.
    docker kill

34. Do you have the previous ubuntu container where you created the file and installed the software? If no reapeat step 25 to 29.
35. Create an Image out of the existing container.
    docker commit

36. Now Create a Container out of this image and login into it to see if you can see the file and software installed by you in the previous container.
37. Do you have running tomcat container? If yes, Stop it and kill all tomcat container.
38. Create an index.html file with following code in it:-
	<h1>This is Tomcat Container</h1>
Now, Start a tomcat container in such a way that on hitting its URL for home page it should show the above html page.
39. type below command:-
	docker images --help
Now, try to run command that proves the concept of following three options:-
1. -a
2. -f
3. -q

write atleast 1 command using each option above and prove their concepts as described in the --help.


40. type below command:-
	docker ps --help
Now, try to run command that proves the concept of following six options:-
1. -a
2. -f
3. -q
4. -n
5. -l
6. -s

write atleast 1 command using each option above and prove their concepts as described in the --help.


41. Type below command:-
	docker --help

you will various sections of commands apart from options like "Managemnet Commands" and "Commands".


Write some texts below describing the use of "Management Commands".



Use each command mentioned below and prove its concepts as described in the --help desription. write what you have understood from the output of the command after its successful execution.
1. cp
2. create
3. export
4. history
5. info
6. login
7. logout
8. rename
9. save
10. stats
11. top



42. Kill all running container in one liner command.
    docker kill $(docker ps -q)

43. Delete all images in one liner command.
    docker images rm $(docker images -q)

44. Create a simple Dockerfile, build it and run it.
45. Create one or more Dockerfile that demostrate the following commands in Dockerfile (Write a PoC for each in one or more Dockerfile)
	1. USER
	2. RUN
	3. ENV
	4. CMD
	5. RUN
	6. ENTRYPOINT
	7. EXPOSE
	8. VOLUME
	
46. Dockerhub:-
	Find a application you care about on docker hub.
	Launch the container.
	Install another application in it.
	Save (commit) the image.
	Upload that to docker hub in your account and share it with a colleague, ask them to use your image and run the container out of it in their machine/vm.


